
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fc  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000169  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initISR>:
volatile int phase = 0;
#define timefactor 1000

void initISR(void) {
	
	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
  90:	52 98       	cbi	0x0a, 2	; 10
	// PD2 (PCINT0 pin) is now an input

	PORTD |= (1 << PORTD2);    // turn On the Pull-up
  92:	5a 9a       	sbi	0x0b, 2	; 11
	// PD2 is now an input with pull-up enabled

	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
  94:	e9 e6       	ldi	r30, 0x69	; 105
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
  9e:	e8 9a       	sbi	0x1d, 0	; 29

	sei();                    // turn on interrupts
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <__vector_1>:
	
}

ISR(INT0_vect) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	phase = 3;
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{

	DDRB |= (1 << PB0);
  cc:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << PB1);
  ce:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << PB2);
  d0:	22 9a       	sbi	0x04, 2	; 4


	initISR();
  d2:	0e 94 48 00 	call	0x90	; 0x90 <initISR>
			PORTB = 4;					
			_delay_ms(5 * timefactor);
		}
		else if (phase == 3) // orange indicates that red is coming, oh no...
		{
			PORTB = 2;					
  d6:	52 e0       	ldi	r21, 0x02	; 2
			PORTB = 3; 
			_delay_ms(1 * timefactor);
		}
		else if (phase == 2) // green, we are good to go!
		{
			PORTB = 4;					
  d8:	44 e0       	ldi	r20, 0x04	; 4
			PORTB = 1;
			_delay_ms(5 * timefactor);
		}		
		else if (phase == 1) // red + orange indicate that it's going to be green, hell yeah!
		{
			PORTB = 3; 
  da:	33 e0       	ldi	r19, 0x03	; 3
	
	while(1) {
		
		if (phase == 0) // red lights
		{
			PORTB = 1;
  dc:	21 e0       	ldi	r18, 0x01	; 1

	initISR();
	
	while(1) {
		
		if (phase == 0) // red lights
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e6:	89 2b       	or	r24, r25
  e8:	59 f4       	brne	.+22     	; 0x100 <main+0x34>
		{
			PORTB = 1;
  ea:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	6f ef       	ldi	r22, 0xFF	; 255
  ee:	83 e2       	ldi	r24, 0x23	; 35
  f0:	94 ef       	ldi	r25, 0xF4	; 244
  f2:	61 50       	subi	r22, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x26>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x30>
  fc:	00 00       	nop
  fe:	32 c0       	rjmp	.+100    	; 0x164 <main+0x98>
			_delay_ms(5 * timefactor);
		}		
		else if (phase == 1) // red + orange indicate that it's going to be green, hell yeah!
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	59 f4       	brne	.+22     	; 0x122 <main+0x56>
		{
			PORTB = 3; 
 10c:	35 b9       	out	0x05, r19	; 5
 10e:	6f ef       	ldi	r22, 0xFF	; 255
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	61 50       	subi	r22, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x48>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x52>
 11e:	00 00       	nop
 120:	21 c0       	rjmp	.+66     	; 0x164 <main+0x98>
			_delay_ms(1 * timefactor);
		}
		else if (phase == 2) // green, we are good to go!
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12a:	02 97       	sbiw	r24, 0x02	; 2
 12c:	59 f4       	brne	.+22     	; 0x144 <main+0x78>
		{
			PORTB = 4;					
 12e:	45 b9       	out	0x05, r20	; 5
 130:	6f ef       	ldi	r22, 0xFF	; 255
 132:	83 e2       	ldi	r24, 0x23	; 35
 134:	94 ef       	ldi	r25, 0xF4	; 244
 136:	61 50       	subi	r22, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x6a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x74>
 140:	00 00       	nop
 142:	10 c0       	rjmp	.+32     	; 0x164 <main+0x98>
			_delay_ms(5 * timefactor);
		}
		else if (phase == 3) // orange indicates that red is coming, oh no...
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14c:	03 97       	sbiw	r24, 0x03	; 3
 14e:	51 f4       	brne	.+20     	; 0x164 <main+0x98>
		{
			PORTB = 2;					
 150:	55 b9       	out	0x05, r21	; 5
 152:	6f ef       	ldi	r22, 0xFF	; 255
 154:	83 ed       	ldi	r24, 0xD3	; 211
 156:	90 e3       	ldi	r25, 0x30	; 48
 158:	61 50       	subi	r22, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x8c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x96>
 162:	00 00       	nop
			_delay_ms(1 * timefactor);
			
		}

		phase = (phase + 1) % 4;
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	83 70       	andi	r24, 0x03	; 3
 170:	90 78       	andi	r25, 0x80	; 128
 172:	99 23       	and	r25, r25
 174:	24 f4       	brge	.+8      	; 0x17e <main+0xb2>
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	8c 6f       	ori	r24, 0xFC	; 252
 17a:	9f 6f       	ori	r25, 0xFF	; 255
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

		
	}
 186:	ab cf       	rjmp	.-170    	; 0xde <main+0x12>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
